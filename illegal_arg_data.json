[
    {
        "_index": "event_details_2020_2_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "6211-h7gd-wn5t-wrp3_4e9ef7b3-748c-4a96-a279-aaccde18fd08",
        "_score": 5.779715,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": "2020-02-18T05: 00: 59.797Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 1,
            "tags": [
                {
                    "value": "100s-103n-57ga-oft0",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "SSNZS0006402"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "DWCH"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "6211-hrly-n78i-c1nm"
                    ],
                    "service": {
                        "id": "3b1dd7cf-ef66-4d47-b76c-274d3a8844fc",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "DWCH",
                        "originPort": "CNYTN",
                        "destinationPort": "USLAX",
                        "startTime": "2019-12-19T18: 19: 00.000Z",
                        "lsTrackingIds": [
                            "SSNZS0006402",
                            "100s-103n-57ga-oft0"
                        ]
                    },
                    "logisticsServiceContractId": "DWCH_TRANSPORTATION_FCL_UNLOC_CNYTN_UNLOC_USLAX",
                    "invoiceContractId": "5D8661E2-BBE7-4AFC-AF02-286EF19777BB",
                    "liabilityDate": "2019-12-19T18: 19: 00Z"
                }
            ],
            "requestId": "4e9ef7b3-748c-4a96-a279-aaccde18fd08",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.logisticsServices.1.destination '$sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0'::{loadType:FCL,actualTimeWindow:{startTime:2020-04-27T00:00:00.000Z},origin:{location:{addressIdentifier:{addressId:\"CNNGB\",marketplaceId:\"1\"},code:\"CNNGB\",codeType:UNLOC,address:{countryCode:\"CN\",name:\"CNNGB\"},locationType:PORT_OF_LADING}},serviceProvider:{idAndType:{id:\"SINO\",type:SCAC}},transportationMode:OCEAN,customsClearanceType:IMPORT,termsOfService:{shipping:CY_DOOR,incoterm:DDP},logisticsServiceTrackingIdAndTypes:[{source:\"LSP\",id:\"AMZDCN20C65BC21F\",type:\"AMAZON_HOUSE_BILL_OF_LADING_NUMBER\"},{source:\"CLIENT\",id:\"100s-0uzl-tlzj-hgw0\",type:\"SHIPMENT_ID\"}],tags:[{value:\"4f2638c3-436a-4222-801f-6016dd534c7d\",key:\"shipmentLogisticsServiceId\"}]} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.logisticsServices/element/fields.destination/min_occurs 1 0,<this>.logisticsServices.1 '$sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0'::{loadType:FCL,actualTimeWindow:{startTime:2020-04-27T00:00:00.000Z},origin:{location:{addressIdentifier:{addressId:\"CNNGB\",marketplaceId:\"1\"},code:\"CNNGB\",codeType:UNLOC,address:{countryCode:\"CN\",name:\"CNNGB\"},locationType:PORT_OF_LADING}},serviceProvider:{idAndType:{id:\"SINO\",type:SCAC}},transportationMode:OCEAN,customsClearanceType:IMPORT,termsOfService:{shipping:CY_DOOR,incoterm:DDP},logisticsServiceTrackingIdAndTypes:[{source:\"LSP\",id:\"AMZDCN20C65BC21F\",type:\"AMAZON_HOUSE_BILL_OF_LADING_NUMBER\"},{source:\"CLIENT\",id:\"100s-0uzl-tlzj-hgw0\",type:\"SHIPMENT_ID\"}],tags:[{value:\"4f2638c3-436a-4222-801f-6016dd534c7d\",key:\"shipmentLogisticsServiceId\"}]} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.logisticsServices/open_elements false null] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:275) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": "6211-h7gd-wn5t-wrp3",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "APHU6446336"
                        ],
                        "containerId": "box-VA6V6N457XU4A",
                        "containerType": "0000",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "6211-h7gd-wn5t-wrp3",
            "timestamp": "2020-02-18T05: 01: 34.530Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_2_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "621u-v8ne-a33p-nxe0_0d191995-46a2-4bc1-abbc-773bd2cbbedf",
        "_score": 5.7419357,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": "2020-02-18T05: 01: 00.111Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 1,
            "tags": [
                {
                    "value": "100s-103n-57ga-oft0",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "SSNZS0006402"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "DWCH"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "APHU6446336"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "6211-hrly-n78i-c1nm"
                    ],
                    "service": {
                        "id": "9cc0a5d4-1603-445b-b7d7-c0a9624d00c8",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                        "serviceProviderId": "DWCH",
                        "originPort": null,
                        "destinationPort": null,
                        "startTime": null,
                        "lsTrackingIds": [
                            "SSNZS0006402",
                            "100s-103n-57ga-oft0"
                        ]
                    },
                    "logisticsServiceContractId": "DWCH_PORT_BROKERING_FCL_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2019-12-19T18: 19: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "6211-hrly-n78i-c1nm"
                    ],
                    "service": {
                        "id": "804adcf1-b6d4-45db-acee-58df2c60e2e5",
                        "transportationMode": null,
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "DWCH",
                        "originPort": "USLAX",
                        "destinationPort": "XIX6",
                        "startTime": null,
                        "lsTrackingIds": [
                            "SSNZS0006402",
                            "100s-103n-57ga-oft0"
                        ]
                    },
                    "logisticsServiceContractId": "DWCH_TRANSPORTATION_FCL_DELIVERY_UNLOC_USLAX_AGL_CODE_XIX6",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2019-12-19T18: 19: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "6211-hrly-n78i-c1nm"
                    ],
                    "service": {
                        "id": "3b1dd7cf-ef66-4d47-b76c-274d3a8844fc",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "DWCH",
                        "originPort": "CNYTN",
                        "destinationPort": "USLAX",
                        "startTime": "2019-12-19T18: 19: 00.000Z",
                        "lsTrackingIds": [
                            "SSNZS0006402",
                            "100s-103n-57ga-oft0"
                        ]
                    },
                    "logisticsServiceContractId": "DWCH_TRANSPORTATION_FCL_UNLOC_CNYTN_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2019-12-19T18: 19: 00Z"
                }
            ],
            "requestId": "0d191995-46a2-4bc1-abbc-773bd2cbbedf",
            "stackTrace": "java.lang.IllegalArgumentException: Client side exception occurred for payment request with ID [621r-l52k-us2p-gza0] and version [7] at com.amazon.xbt.paymentrequest.workflow.sao.PaymentRequestAuthoritySaoImpl.getPaymentRequest(PaymentRequestAuthoritySaoImpl.java:38) at com.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java:62) at com.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java:30) at com.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java:58) at sun.reflect.GeneratedMethodAccessor23.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java:354) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119) Caused by: com.amazon.xbt.exception.ClientException: Error calling Payment Request Authority. HTTP status: 403 Invalid request sent by the client. {\"message\":\"The security token included in the request is expired\"} at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestStatusExceptionFactory.generateStatusException(PaymentRequestStatusExceptionFactory.java:65) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceRestClient.processResponse(PaymentRequestAuthorityServiceRestClient.java:183) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceRestClient.getPaymentRequestWithNoRetry(PaymentRequestAuthorityServiceRestClient.java:78) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceRestClient.lambda$getPaymentRequest$1(PaymentRequestAuthorityServiceRestClient.java:98) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceCallHandler.retry(PaymentRequestAuthorityServiceCallHandler.java:70) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceCallHandler.handleServiceCall(PaymentRequestAuthorityServiceCallHandler.java:34) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceRestClient.getPaymentRequest(PaymentRequestAuthorityServiceRestClient.java:98) at com.amazon.xbt.paymentrequest.workflow.sao.PaymentRequestAuthoritySaoImpl.getPaymentRequest(PaymentRequestAuthoritySaoImpl.java:32) ... 13 more ",
            "id": "621u-v8ne-a33p-nxe0",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "APHU6446336"
                        ],
                        "containerId": "box-VA6V6N457XU4A",
                        "containerType": "0000",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "621u-v8ne-a33p-nxe0",
            "timestamp": "2020-02-18T05: 01: 35.915Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-iukx-5ffu-97qd_00391ec6-655a-4574-aca8-2bd7165705d7",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-iukx-5ffu-97qd",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "OOLU",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-01-20T18: 01: 00.000Z",
                    "lsTrackingIds": [
                        "1001-iukx-5ffu-97qd",
                        "OOLU2110624370"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-02-10T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "1001-iukx-5ffu-97qd",
                        "AMZDCN198F8BE9E0"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "USCHI",
                    "destinationPort": "MDW6",
                    "startTime": "2020-02-15T03: 38: 00.000-08: 00",
                    "lsTrackingIds": [
                        "1001-iukx-5ffu-97qd",
                        "OOLU2110624370"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": "2020-02-15T03: 38: 00.000-08: 00",
                    "lsTrackingIds": [
                        "1001-iukx-5ffu-97qd",
                        "OOLU2110624370"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-01-27T22: 29: 00.000Z",
                    "lsTrackingIds": [
                        "1001-iukx-5ffu-97qd",
                        "AMZDCN198F8BE9E0"
                    ]
                }
            ],
            "requestId": "00391ec6-655a-4574-aca8-2bd7165705d7",
            "stackTrace": "java.lang.IllegalArgumentException: Either NodeCode or DestCode or PortCode must be present for Node Based Services at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$0(NodeBasedCompositeIdTransformFn.java:34) at java.util.Optional.orElseThrow(Optional.java:290) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$1(NodeBasedCompositeIdTransformFn.java:34) at java.util.Optional.orElseGet(Optional.java:267) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$getOriginId$2(NodeBasedCompositeIdTransformFn.java:33) at java.util.Optional.orElseGet(Optional.java:267) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.getOriginId(NodeBasedCompositeIdTransformFn.java:32) at com.amazon.xbt.finance.supply.transformer.LogisticsServiceCompositeIdTransformFn.apply(LogisticsServiceCompositeIdTransformFn.java:49) at com.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java:99) at com.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java:68) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:92) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:38) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java:81) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1556) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:83) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:42) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java:600) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java:299) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java:632) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:313) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.GeneratedMethodAccessor115.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "OOCU6543599"
                        ],
                        "containerId": "box-WXHPKRWFKWXEC",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "BMOU4843330"
                        ],
                        "containerId": "box-R6Q26XXKYQDZ4",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-iukx-5ffu-97qd",
            "timestamp": "2020-03-05T05: 46: 28.301Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "100t-oa2g-tnmu-ofm0_8ace4c79-657f-4c5e-94d5-660684f596ae",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100t-oa2g-tnmu-ofm0",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "EGLV",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-03-09T00: 19: 00.000-07: 00",
                    "lsTrackingIds": [
                        "100t-oa2g-tnmu-ofm0",
                        "EGLV143078471494"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": null,
                    "lsTrackingIds": [
                        "100t-oa2g-tnmu-ofm0",
                        "AMZDCN20B5B5BE06"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": null,
                    "lsTrackingIds": [
                        "100t-oa2g-tnmu-ofm0",
                        "AMZDCN20B5B5BE06"
                    ]
                }
            ],
            "requestId": "8ace4c79-657f-4c5e-94d5-660684f596ae",
            "stackTrace": "java.lang.IllegalArgumentException: Either NodeCode or DestCode or PortCode must be present for Node Based Services at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$0(NodeBasedCompositeIdTransformFn.java:34) at java.util.Optional.orElseThrow(Optional.java:290) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$1(NodeBasedCompositeIdTransformFn.java:34) at java.util.Optional.orElseGet(Optional.java:267) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$getOriginId$2(NodeBasedCompositeIdTransformFn.java:33) at java.util.Optional.orElseGet(Optional.java:267) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.getOriginId(NodeBasedCompositeIdTransformFn.java:32) at com.amazon.xbt.finance.supply.transformer.LogisticsServiceCompositeIdTransformFn.apply(LogisticsServiceCompositeIdTransformFn.java:49) at com.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java:99) at com.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java:68) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:92) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:38) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java:81) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1556) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:83) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:42) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java:600) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java:299) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java:632) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:313) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.GeneratedMethodAccessor115.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "SEGU6027034"
                        ],
                        "containerId": "box-XRGG5UETZDYJY",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "TLLU4741604"
                        ],
                        "containerId": "box-UX2YGN4ZJFFWE",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "100t-oa2g-tnmu-ofm0",
            "timestamp": "2020-03-08T19: 32: 29.007Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "100t-oa2g-tnmu-ofm0_bf8276a0-e619-47ab-8445-78eb4d2897f4",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100t-oa2g-tnmu-ofm0",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "EGLV",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-03-08T16: 19: 00.000Z",
                    "lsTrackingIds": [
                        "100t-oa2g-tnmu-ofm0",
                        "EGLV143078471494"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": null,
                    "lsTrackingIds": [
                        "100t-oa2g-tnmu-ofm0",
                        "AMZDCN20B5B5BE06"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": null,
                    "lsTrackingIds": [
                        "100t-oa2g-tnmu-ofm0",
                        "AMZDCN20B5B5BE06"
                    ]
                }
            ],
            "requestId": "bf8276a0-e619-47ab-8445-78eb4d2897f4",
            "stackTrace": "java.lang.IllegalArgumentException: Client side exception occurred while updating payment manifest with id [8211-jym2-tksg-xjky] and version [2] at com.amazon.xbt.paymentrequest.workflow.sao.PaymentManifestAuthoritySaoImpl.updatePaymentManifest(PaymentManifestAuthoritySaoImpl.java:89) at com.amazon.xbt.paymentrequest.workflow.lambda.function.GeneratePaymentManifestFn.apply(GeneratePaymentManifestFn.java:137) at com.amazon.xbt.paymentrequest.workflow.lambda.function.GeneratePaymentManifestFn.apply(GeneratePaymentManifestFn.java:40) at com.amazon.xbt.paymentrequest.workflow.lambda.handler.GeneratePaymentManifestHandler.handleRequest(GeneratePaymentManifestHandler.java:75) at sun.reflect.GeneratedMethodAccessor24.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java:354) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119) Caused by: com.amazon.xbt.exception.InvalidResourceException: Error calling Payment Manifest Authority. HTTP status: 400 Invalid request sent by the client. PaymentManifest Optional[8211-jym2-tksg-xjky] update failed due to validation errors: Invalid draft payment manifest with charges in service: $sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0. at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestStatusExceptionFactory.generateStatusException(PaymentManifestStatusExceptionFactory.java:64) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.processResponse(PaymentManifestAuthorityServiceRestClient.java:266) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.updatePaymentManifestWithNoRetry(PaymentManifestAuthorityServiceRestClient.java:139) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.lambda$updatePaymentManifest$3(PaymentManifestAuthorityServiceRestClient.java:152) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceCallHandler.retry(PaymentManifestAuthorityServiceCallHandler.java:69) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceCallHandler.handleServiceCall(PaymentManifestAuthorityServiceCallHandler.java:34) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.updatePaymentManifest(PaymentManifestAuthorityServiceRestClient.java:151) at com.amazon.xbt.paymentrequest.workflow.sao.PaymentManifestAuthoritySaoImpl.updatePaymentManifest(PaymentManifestAuthoritySaoImpl.java:79) ... 13 more ",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "SEGU6027034"
                        ],
                        "containerId": "box-XRGG5UETZDYJY",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "TLLU4741604"
                        ],
                        "containerId": "box-UX2YGN4ZJFFWE",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "100t-oa2g-tnmu-ofm0",
            "timestamp": "2020-03-08T19: 41: 56.741Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "CNSHA0000850156_32595716-c2b2-4376-817a-0509ad0aae8c",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100s-164q-coco-65u0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "CNSHA0000850156",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "CNSHA",
                    "destinationPort": "GBFXT",
                    "startTime": "2020-02-27T15: 45: 00.000Z",
                    "lsTrackingIds": [
                        "CNSHA0000850156"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "GBFXT",
                    "destinationPort": "BHX4",
                    "startTime": null,
                    "lsTrackingIds": [
                        "CNSHA0000850156"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "CNSHA",
                    "destinationPort": "GBFXT",
                    "startTime": null,
                    "lsTrackingIds": [
                        "CNSHA0000850156"
                    ]
                }
            ],
            "requestId": "32595716-c2b2-4376-817a-0509ad0aae8c",
            "stackTrace": "com.amazon.xbt.paymentrequest.authority.exception.NoSuchValueException: No value found for key : TRACKING_ID at com.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.lambda$getAttributeValue$1(LogisticsServiceUnitEvalConfigImpl.java:80) at java.util.Optional.orElseThrow(Optional.java:290) at com.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.getAttributeValue(LogisticsServiceUnitEvalConfigImpl.java:80) at com.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.getStringValue(LogisticsServiceUnitEvalConfigImpl.java:56) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.instruction.AsiSupplyInvoiceIdInstructionImpl$1.getVar(AsiSupplyInvoiceIdInstructionImpl.java:67) at com.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java:35) at com.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java:57) at com.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java:45) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.instruction.AsiSupplyInvoiceIdInstructionImpl.evaluate(AsiSupplyInvoiceIdInstructionImpl.java:84) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.constructMappedLsUnit(WorkIdBasedMapper.java:113) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.lambda$apply$0(WorkIdBasedMapper.java:96) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Collections$2.tryAdvance(Collections.java:4717) at java.util.Collections$2.forEachRemaining(Collections.java:4725) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:97) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:38) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java:80) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1556) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:82) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:42) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java:600) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java:299) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java:632) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:313) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "TRLU8955740"
                        ],
                        "containerId": "f0e5bd07-26a9-4f5c-9d40-a785e310c564",
                        "containerType": "20GP",
                        "childContainerIds": [
                            "LCL-VXGQ3KJ6GBRV4"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-VXGQ3KJ6GBRV4",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "CNSHA0000850156",
            "timestamp": "2020-03-09T07: 23: 52.924Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-je9v-xzsh-mo9u_5552da61-9b18-498a-9895-53d25b3a35bc",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-je9v-xzsh-mo9u",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "AIR",
                    "loadType": "AIR_FREIGHT",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "PNEP",
                    "originPort": "SZX",
                    "destinationPort": "ONT8",
                    "startTime": "2020-03-07T02: 17: 00.000Z",
                    "lsTrackingIds": [
                        "1001-je9v-xzsh-mo9u",
                        "SZX208669"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "AIR_FREIGHT",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "PNEP",
                    "originPort": null,
                    "destinationPort": "ONT8",
                    "startTime": null,
                    "lsTrackingIds": [
                        "1001-je9v-xzsh-mo9u",
                        "SZX208669"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "AIR",
                    "loadType": "AIR_FREIGHT",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "AMIG",
                    "originPort": "SZX",
                    "destinationPort": "LAX",
                    "startTime": null,
                    "lsTrackingIds": [
                        "1001-je9v-xzsh-mo9u",
                        "SZX208669"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "AIR",
                    "loadType": "AIR_FREIGHT",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "PNEP",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": "2020-03-08T00: 47: 00.000Z",
                    "lsTrackingIds": [
                        "1001-je9v-xzsh-mo9u",
                        "SZX208669"
                    ]
                }
            ],
            "requestId": "5552da61-9b18-498a-9895-53d25b3a35bc",
            "stackTrace": """java.lang.IllegalArgumentException: OriginIdmustbepresentforArcBasedservicesatcom.amazon.xbt.finance.supply.transformer.ArcBasedCompositeIdTransformFn.lambda$getOriginId$0(ArcBasedCompositeIdTransformFn.java: 25)atjava.util.Optional.orElseThrow(Optional.java: 290)atcom.amazon.xbt.finance.supply.transformer.ArcBasedCompositeIdTransformFn.getOriginId(ArcBasedCompositeIdTransformFn.java: 25)atcom.amazon.xbt.finance.supply.transformer.LogisticsServiceCompositeIdTransformFn.apply(LogisticsServiceCompositeIdTransformFn.java: 49)atcom.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java: 99)atcom.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java: 68)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java: 92)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java: 38)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java: 79)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java: 1556)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java: 81)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java: 42)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java: 599)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java: 298)atjava.util.concurrent.Executors$RunnableAdapter.call(Executors.java: 511)atcom.amazon.retry.RetryingCallable.call(RetryingCallable.java: 95)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java: 631)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java: 312)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java: 105)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>)atcom.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java: 70)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java: 62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java: 261)atlambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java: 178)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 114)""",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "98823829492"
                        ],
                        "containerId": "LCL-SXMWC2XCHXQXX",
                        "containerType": "ANYA",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-je9v-xzsh-mo9u",
            "timestamp": "2020-03-10T18: 01: 01.651Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "100u-7ww6-53as-m5t0_207ec42c-2224-4904-a4a1-56433d0104e0",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100u-7ww6-53as-m5t0",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "APLU",
                    "originPort": "CNNGB",
                    "destinationPort": "USHOU",
                    "startTime": "2020-03-04T08: 09: 00.000Z",
                    "lsTrackingIds": [
                        "APLUNPWY056756",
                        "100u-7ww6-53as-m5t0"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": null,
                    "lsTrackingIds": [
                        "AMZDCN2025125848",
                        "100u-7ww6-53as-m5t0"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-03-11T00: 32: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN2025125848",
                        "100u-7ww6-53as-m5t0"
                    ]
                }
            ],
            "requestId": "207ec42c-2224-4904-a4a1-56433d0104e0",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.logisticsServices.1.destination '$sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0'::{loadType:FCL,actualTimeWindow:{startTime:2020-03-21T00:00:00.000Z},origin:{location:{addressIdentifier:{addressId:\"CNSHA\",marketplaceId:\"1\"},code:\"CNNGB\",codeType:UNLOC,address:{countryCode:\"CN\",name:\"CNNGB\"},locationType:PORT_OF_LADING}},serviceProvider:{idAndType:{id:\"SINO\",type:SCAC}},transportationMode:OCEAN,customsClearanceType:IMPORT,termsOfService:{shipping:CY_DOOR,incoterm:DDP},logisticsServiceTrackingIdAndTypes:[{source:\"LSP\",id:\"AMZDCN20C65BC2432\",type:\"AMAZON_HOUSE_BILL_OF_LADING_NUMBER\"},{source:\"CLIENT\",id:\"100s-5ryl-tlzj-hvga\",type:\"SHIPMENT_ID\"}],tags:[{value:\"67238c3-436a-4222-801f-6016dd534c7d\",key:\"shipmentLogisticsServiceId\"}]} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.logisticsServices/element/fields.destination/min_occurs 1 0,<this>.logisticsServices.1 '$sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0'::{loadType:FCL,actualTimeWindow:{startTime:2020-04-27T00:00:00.000Z},origin:{location:{addressIdentifier:{addressId:\"CNNGB\",marketplaceId:\"1\"},code:\"CNNGB\",codeType:UNLOC,address:{countryCode:\"CN\",name:\"CNNGB\"},locationType:PORT_OF_LADING}},serviceProvider:{idAndType:{id:\"SINO\",type:SCAC}},transportationMode:OCEAN,customsClearanceType:IMPORT,termsOfService:{shipping:CY_DOOR,incoterm:DDP},logisticsServiceTrackingIdAndTypes:[{source:\"LSP\",id:\"AMZDCN20C65BC679\",type:\"AMAZON_HOUSE_BILL_OF_LADING_NUMBER\"},{source:\"CLIENT\",id:\"100s-456zl-tlzj-67gv\",type:\"SHIPMENT_ID\"}],tags:[{value:\"fgs59vajs-436a-4222-801f-6016dd534c7d\",key:\"shipmentLogisticsServiceId\"}]} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.logisticsServices/open_elements false null] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:275) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "GVCU5062846"
                        ],
                        "containerId": "box-UYCE4BXWPUBYE",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "100u-7ww6-53as-m5t0",
            "timestamp": "2020-03-11T03: 42: 02.253Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "100q-e6n1-0hlu-q0k0_4ba1af07-6981-4c8f-98fa-3875ee164394",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100q-e6n1-0hlu-q0k0",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "APLU",
                    "originPort": "CNNGB",
                    "destinationPort": "USHOU",
                    "startTime": "2020-03-04T08: 41: 00.000Z",
                    "lsTrackingIds": [
                        "100q-e6n1-0hlu-q0k0",
                        "APLUNPWY056757"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USHOU",
                    "startTime": null,
                    "lsTrackingIds": [
                        "100q-e6n1-0hlu-q0k0",
                        "AMZDCN203A7339E3"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-03-11T08: 32: 00.000-07: 00",
                    "lsTrackingIds": [
                        "100q-e6n1-0hlu-q0k0",
                        "AMZDCN203A7339E3"
                    ]
                }
            ],
            "requestId": "4ba1af07-6981-4c8f-98fa-3875ee164394",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.tags [{value:\"APLU-APLUAJD0578895-TGHU6345060\",key:\"tag:manifestMatchId\"},{value:\"27626613822\",key:\"tag:asnId\"},{value:\"30160613882\",key:\"tag:asnId\"},{value:\"29345046372\",key:\"tag:asnId\"},{value:\"28572697482\",key:\"tag:asnId\"},{value:\"28572697442\",key:\"tag:asnId\"},{value:\"28572697522\",key:\"tag:asnId\"},{value:\"27626613652\",key:\"tag:asnId\"},{value:\"29360618732\",key:\"tag:asnId\"},{value:\"28895577682\",key:\"tag:asnId\"},{value:\"28895577642\",key:\"tag:asnId\"},{value:\"28572697472\",key:\"tag:asnId\"},{value:\"27614334182\",key:\"tag:asnId\"},{value:\"28584126262\",key:\"tag:asnId\"},{value:\"29345046362\",key:\"tag:asnId\"},{value:\"28584125972\",key:\"tag:asnId\"},{value:\"28572697432\",key:\"tag:asnId\"},{value:\"28572697552\",key:\"tag:asnId\"},{value:\"28584125932\",key:\"tag:asnId\"},{value:\"28572697512\",key:\"tag:asnId\"},{value:\"30160613892\",key:\"tag:asnId\"},{value:\"27626613662\",key:\"tag:asnId\"},{value:\"28895577692\",key:\"tag:asnId\"},{value:\"29360618782\",key:\"tag:asnId\"},{value:\"28895577652\",key:\"tag:asnId\"},{value:\"27614334222\",key:\"tag:asnId\"},{value:\"28572697582\",key:\"tag:asnId\"},{value:\"29360618822\",key:\"tag:asnId\"},{value:\"29345046352\",key:\"tag:asnId\"},{value:\"28572697462\",key:\"tag:asnId\"},{value:\"28572697542\",key:\"tag:asnId\"},{value:\"30160521322\",key:\"tag:asnId\"},{value:\"28572697502\",key:\"tag:asnId\"},{value:\"27615254342\",key:\"tag:asnId\"},{value:\"28584125802\",key:\"tag:asnId\"},{value:\"28584125922\",key:\"tag:asnId\"},{value:\"27626613672\",key:\"tag:asnId\"},{value:\"30160613902\",key:\"tag:asnId\"},{value:\"27614334162\",key:\"tag:asnId\"},{value:\"28572697492\",key:\"tag:asnId\"},{value:\"28584126362\",key:\"tag:asnId\"},{value:\"28572697452\",key:\"tag:asnId\"},{value:\"28572697572\",key:\"tag:asnId\"},{value:\"27626613602\",key:\"tag:asnId\"},{value:\"28572697532\",key:\"tag:asnId\"},{value:\"27615254332\",key:\"tag:asnId\"},{value:\"27626613522\",key:\"tag:asnId\"},{value:\"29360618762\",key:\"tag:asnId\"},{value:\"28895577672\",key:\"tag:asnId\"},{value:\"27614334202\",key:\"tag:asnId\"},{value:\"28584126092\",key:\"tag:asnId\"}] com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.tags/max_length 50 51] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.update(IonPaymentRequest.java:326) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.update(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.UpdatePaymentRequestHandler.handleRequest(UpdatePaymentRequestHandler.java:67) at sun.reflect.GeneratedMethodAccessor115.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119) ",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "TGHU9741779"
                        ],
                        "containerId": "box-UVCKSXT75EJ7S",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "100q-e6n1-0hlu-q0k0",
            "timestamp": "2020-03-11T03: 19: 48.868Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-je9v-xzsh-mo9u_26d52fbe-0467-4ba8-afe9-c1ab930e2c35",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-je9v-xzsh-mo9u",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "AIR",
                    "loadType": "AIR_FREIGHT",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "PNEP",
                    "originPort": "SZX",
                    "destinationPort": "ONT8",
                    "startTime": "2020-03-07T02: 17: 00.000Z",
                    "lsTrackingIds": [
                        "1001-je9v-xzsh-mo9u",
                        "SZX208669"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "AIR_FREIGHT",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "PNEP",
                    "originPort": null,
                    "destinationPort": "ONT8",
                    "startTime": null,
                    "lsTrackingIds": [
                        "1001-je9v-xzsh-mo9u",
                        "SZX208669"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "AIR",
                    "loadType": "AIR_FREIGHT",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "AMIG",
                    "originPort": "SZX",
                    "destinationPort": "LAX",
                    "startTime": null,
                    "lsTrackingIds": [
                        "1001-je9v-xzsh-mo9u",
                        "SZX208669"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "AIR",
                    "loadType": "AIR_FREIGHT",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "PNEP",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": "2020-03-08T00: 47: 00.000Z",
                    "lsTrackingIds": [
                        "1001-je9v-xzsh-mo9u",
                        "SZX208669"
                    ]
                }
            ],
            "requestId": "26d52fbe-0467-4ba8-afe9-c1ab930e2c35",
            "stackTrace": """java.lang.IllegalArgumentException: EitherNodeCodeorDestCodeorPortCodemustbepresentforNodeBasedServicesatcom.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$0(NodeBasedCompositeIdTransformFn.java: 34)atjava.util.Optional.orElseThrow(Optional.java: 290)atcom.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$1(NodeBasedCompositeIdTransformFn.java: 34)atjava.util.Optional.orElseGet(Optional.java: 267)atcom.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$getOriginId$2(NodeBasedCompositeIdTransformFn.java: 33)atjava.util.Optional.orElseGet(Optional.java: 267)atcom.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.getOriginId(NodeBasedCompositeIdTransformFn.java: 32)atcom.amazon.xbt.finance.supply.transformer.LogisticsServiceCompositeIdTransformFn.apply(LogisticsServiceCompositeIdTransformFn.java: 49)atcom.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java: 99)atcom.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java: 68)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java: 92)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java: 38)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java: 79)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java: 1556)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java: 81)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java: 42)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java: 599)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java: 298)atjava.util.concurrent.Executors$RunnableAdapter.call(Executors.java: 511)atcom.amazon.retry.RetryingCallable.call(RetryingCallable.java: 95)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java: 631)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java: 312)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java: 105)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>)atcom.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java: 70)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java: 62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java: 261)atlambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java: 178)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 114)""",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "98823829492"
                        ],
                        "containerId": "LCL-SXMWC2XCHXQXX",
                        "containerType": "ANYA",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-je9v-xzsh-mo9u",
            "timestamp": "2020-03-11T08: 00: 12.840Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "CNSHA0000847399_2407ccf3-bd20-479c-9006-e96677babd5b",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100t-4sz0-d1fw-s380",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "CNSHA0000847399",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "CNSHA",
                    "destinationPort": "GBFXT",
                    "startTime": "2020-02-20T17: 47: 00.000Z",
                    "lsTrackingIds": [
                        "CNSHA0000847399"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "GBFXT",
                    "destinationPort": "BHX4",
                    "startTime": null,
                    "lsTrackingIds": [
                        "CNSHA0000847399"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "CNSHA",
                    "destinationPort": "GBFXT",
                    "startTime": null,
                    "lsTrackingIds": [
                        "CNSHA0000847399"
                    ]
                }
            ],
            "requestId": "2407ccf3-bd20-479c-9006-e96677babd5b",
            "stackTrace": "java.lang.IllegalArgumentException: Client side exception occurred while updating payment manifest with id [8211-jym2-tksg-xjky] and version [2] at com.amazon.xbt.paymentrequest.workflow.sao.PaymentManifestAuthoritySaoImpl.updatePaymentManifest(PaymentManifestAuthoritySaoImpl.java:89) at com.amazon.xbt.paymentrequest.workflow.lambda.function.GeneratePaymentManifestFn.apply(GeneratePaymentManifestFn.java:137) at com.amazon.xbt.paymentrequest.workflow.lambda.function.GeneratePaymentManifestFn.apply(GeneratePaymentManifestFn.java:40) at com.amazon.xbt.paymentrequest.workflow.lambda.handler.GeneratePaymentManifestHandler.handleRequest(GeneratePaymentManifestHandler.java:75) at sun.reflect.GeneratedMethodAccessor24.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java:354) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119) Caused by: com.amazon.xbt.exception.InvalidResourceException: Error calling Payment Manifest Authority. HTTP status: 400 Invalid request sent by the client. PaymentManifest Optional[8211-jym2-tksg-xjky] update failed due to validation errors: Invalid draft payment manifest with charges in service: $sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0. at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestStatusExceptionFactory.generateStatusException(PaymentManifestStatusExceptionFactory.java:64) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.processResponse(PaymentManifestAuthorityServiceRestClient.java:266) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.updatePaymentManifestWithNoRetry(PaymentManifestAuthorityServiceRestClient.java:139) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.lambda$updatePaymentManifest$3(PaymentManifestAuthorityServiceRestClient.java:152) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceCallHandler.retry(PaymentManifestAuthorityServiceCallHandler.java:69) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceCallHandler.handleServiceCall(PaymentManifestAuthorityServiceCallHandler.java:34) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.updatePaymentManifest(PaymentManifestAuthorityServiceRestClient.java:151) at com.amazon.xbt.paymentrequest.workflow.sao.PaymentManifestAuthoritySaoImpl.updatePaymentManifest(PaymentManifestAuthoritySaoImpl.java:79) ... 13 more ",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "CBCU7007802"
                        ],
                        "containerId": "2fd99e84-e795-4e38-aea2-85aeabd41435",
                        "containerType": "20GP",
                        "childContainerIds": [
                            "LCL-VFXJTNTCMTQYQ"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-VFXJTNTCMTQYQ",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "CNSHA0000847399",
            "timestamp": "2020-03-12T04: 00: 21.092Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-ib98-mymj-owfs_0406f0d9-6b6f-4c10-9099-b1693d56aeaf",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-ib98-mymj-owfs",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "MAEU",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-02-21T22: 52: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": "2020-03-09T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "USCHI",
                    "destinationPort": "IND5",
                    "startTime": "2020-03-15T09: 35: 00.000-07: 00",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": "2020-03-15T09: 35: 00.000-07: 00",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-02-26T18: 20: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                }
            ],
            "requestId": "0406f0d9-6b6f-4c10-9099-b1693d56aeaf",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.logisticsServices.1.destination '$sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0'::{loadType:FCL,actualTimeWindow:{startTime:2020-04-27T00:00:00.000Z},origin:{location:{addressIdentifier:{addressId:\"CNNGB\",marketplaceId:\"1\"},code:\"CNNGB\",codeType:UNLOC,address:{countryCode:\"CN\",name:\"CNNGB\"},locationType:PORT_OF_LADING}},serviceProvider:{idAndType:{id:\"SINO\",type:SCAC}},transportationMode:OCEAN,customsClearanceType:IMPORT,termsOfService:{shipping:CY_DOOR,incoterm:DDP},logisticsServiceTrackingIdAndTypes:[{source:\"LSP\",id:\"AMZDCN20C656798F\",type:\"AMAZON_HOUSE_BILL_OF_LADING_NUMBER\"},{source:\"CLIENT\",id:\"100s-0uzl-tlzj-hgw0\",type:\"SHIPMENT_ID\"}],tags:[{value:\"45657vmc3-436a-4222-801f-6016dd534c7d\",key:\"shipmentLogisticsServiceId\"}]} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.logisticsServices/element/fields.destination/min_occurs 1 0,<this>.logisticsServices.1 '$sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0'::{loadType:FCL,actualTimeWindow:{startTime:2020-04-27T00:00:00.000Z},origin:{location:{addressIdentifier:{addressId:\"CNNGB\",marketplaceId:\"1\"},code:\"CNNGB\",codeType:UNLOC,address:{countryCode:\"CN\",name:\"CNNGB\"},locationType:PORT_OF_LADING}},serviceProvider:{idAndType:{id:\"SINO\",type:SCAC}},transportationMode:OCEAN,customsClearanceType:IMPORT,termsOfService:{shipping:CY_DOOR,incoterm:DDP},logisticsServiceTrackingIdAndTypes:[{source:\"LSP\",id:\"AMZDCN20C656798F\",type:\"AMAZON_HOUSE_BILL_OF_LADING_NUMBER\"},{source:\"CLIENT\",id:\"100s-0uzl-tlzj-hgw0\",type:\"SHIPMENT_ID\"}],tags:[{value:\"45657vmc3-436a-4222-801f-6016dd534c7d\",key:\"shipmentLogisticsServiceId\"}]} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.logisticsServices/open_elements false null] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:275) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "MSKU9654590"
                        ],
                        "containerId": "box-SB6ZP7XGNKG2C",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "MSKU0639091"
                        ],
                        "containerId": "box-XEPYNC4TUSXWU",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-ib98-mymj-owfs",
            "timestamp": "2020-03-16T17: 51: 14.468Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-ib98-mymj-owfs_453af328-b3e0-465f-bcaa-2b95cf4abcf3",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-ib98-mymj-owfs",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "MAEU",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-02-21T22: 52: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": "2020-03-09T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "USCHI",
                    "destinationPort": "IND5",
                    "startTime": "2020-03-15T20: 46: 00.000-07: 00",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": "2020-03-15T20: 46: 00.000-07: 00",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-02-26T18: 20: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                }
            ],
            "requestId": "453af328-b3e0-465f-bcaa-2b95cf4abcf3",
            "stackTrace": "java.lang.IllegalArgumentException: Either NodeCode or DestCode or PortCode must be present for Node Based Services at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$0(NodeBasedCompositeIdTransformFn.java:34) at java.util.Optional.orElseThrow(Optional.java:290) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$1(NodeBasedCompositeIdTransformFn.java:34) at java.util.Optional.orElseGet(Optional.java:267) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$getOriginId$2(NodeBasedCompositeIdTransformFn.java:33) at java.util.Optional.orElseGet(Optional.java:267) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.getOriginId(NodeBasedCompositeIdTransformFn.java:32) at com.amazon.xbt.finance.supply.transformer.LogisticsServiceCompositeIdTransformFn.apply(LogisticsServiceCompositeIdTransformFn.java:49) at com.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java:99) at com.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java:68) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:92) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:38) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java:81) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1556) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:83) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:42) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java:600) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java:299) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java:632) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:313) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.GeneratedMethodAccessor115.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "MSKU9654590"
                        ],
                        "containerId": "box-SB6ZP7XGNKG2C",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "MSKU0639091"
                        ],
                        "containerId": "box-XEPYNC4TUSXWU",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-ib98-mymj-owfs",
            "timestamp": "2020-03-16T17: 51: 16.835Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-ib98-mymj-owfs_c71f337c-2ae1-40b0-968d-e2918b7fb363",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-ib98-mymj-owfs",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "MAEU",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-02-21T22: 52: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": "2020-03-09T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "USCHI",
                    "destinationPort": "IND5",
                    "startTime": "2020-03-14T04: 58: 00.000-07: 00",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": "2020-03-14T04: 58: 00.000-07: 00",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-02-26T18: 20: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                }
            ],
            "requestId": "c71f337c-2ae1-40b0-968d-e2918b7fb363",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.tags [{value:\"APLU-APLUAJD0578895-TGHU6345060\",key:\"tag:manifestMatchId\"},{value:\"27626613822\",key:\"tag:asnId\"},{value:\"30160613882\",key:\"tag:asnId\"},{value:\"29345046372\",key:\"tag:asnId\"},{value:\"28572697482\",key:\"tag:asnId\"},{value:\"28572697442\",key:\"tag:asnId\"},{value:\"28572697522\",key:\"tag:asnId\"},{value:\"27626613652\",key:\"tag:asnId\"},{value:\"29360618732\",key:\"tag:asnId\"},{value:\"28895577682\",key:\"tag:asnId\"},{value:\"28895577642\",key:\"tag:asnId\"},{value:\"28572697472\",key:\"tag:asnId\"},{value:\"27614334182\",key:\"tag:asnId\"},{value:\"28584126262\",key:\"tag:asnId\"},{value:\"29345046362\",key:\"tag:asnId\"},{value:\"28584125972\",key:\"tag:asnId\"},{value:\"28572697432\",key:\"tag:asnId\"},{value:\"28572697552\",key:\"tag:asnId\"},{value:\"28584125932\",key:\"tag:asnId\"},{value:\"28572697512\",key:\"tag:asnId\"},{value:\"30160613892\",key:\"tag:asnId\"},{value:\"27626613662\",key:\"tag:asnId\"},{value:\"28895577692\",key:\"tag:asnId\"},{value:\"29360618782\",key:\"tag:asnId\"},{value:\"28895577652\",key:\"tag:asnId\"},{value:\"27614334222\",key:\"tag:asnId\"},{value:\"28572697582\",key:\"tag:asnId\"},{value:\"29360618822\",key:\"tag:asnId\"},{value:\"29345046352\",key:\"tag:asnId\"},{value:\"28572697462\",key:\"tag:asnId\"},{value:\"28572697542\",key:\"tag:asnId\"},{value:\"30160521322\",key:\"tag:asnId\"},{value:\"28572697502\",key:\"tag:asnId\"},{value:\"27615254342\",key:\"tag:asnId\"},{value:\"28584125802\",key:\"tag:asnId\"},{value:\"28584125922\",key:\"tag:asnId\"},{value:\"27626613672\",key:\"tag:asnId\"},{value:\"30160613902\",key:\"tag:asnId\"},{value:\"27614334162\",key:\"tag:asnId\"},{value:\"28572697492\",key:\"tag:asnId\"},{value:\"28584126362\",key:\"tag:asnId\"},{value:\"28572697452\",key:\"tag:asnId\"},{value:\"28572697572\",key:\"tag:asnId\"},{value:\"27626613602\",key:\"tag:asnId\"},{value:\"28572697532\",key:\"tag:asnId\"},{value:\"27615254332\",key:\"tag:asnId\"},{value:\"27626613522\",key:\"tag:asnId\"},{value:\"29360618762\",key:\"tag:asnId\"},{value:\"28895577672\",key:\"tag:asnId\"},{value:\"27614334202\",key:\"tag:asnId\"},{value:\"28584126092\",key:\"tag:asnId\"}] com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.tags/max_length 50 51] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.update(IonPaymentRequest.java:326) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.update(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.UpdatePaymentRequestHandler.handleRequest(UpdatePaymentRequestHandler.java:67) at sun.reflect.GeneratedMethodAccessor115.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119) ",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "MSKU9654590"
                        ],
                        "containerId": "box-SB6ZP7XGNKG2C",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "MSKU0639091"
                        ],
                        "containerId": "box-XEPYNC4TUSXWU",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-ib98-mymj-owfs",
            "timestamp": "2020-03-16T23: 30: 29.569Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-hbag-dt7q-aiqt_9def97a4-ed83-4ef4-b163-b63281c0f44f",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-hbag-dt7q-aiqt",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "YMLU",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-03-04T07: 42: 00.000-08: 00",
                    "lsTrackingIds": [
                        "YMLUW232376199",
                        "1001-hbag-dt7q-aiqt"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": "2020-03-16T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "1001-hbag-dt7q-aiqt",
                        "AMZDCN19F0EE08AA"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "USCHI",
                    "destinationPort": "IND5",
                    "startTime": null,
                    "lsTrackingIds": [
                        "YMLUW232376199",
                        "1001-hbag-dt7q-aiqt"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": null,
                    "lsTrackingIds": [
                        "YMLUW232376199",
                        "1001-hbag-dt7q-aiqt"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-03-06T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "1001-hbag-dt7q-aiqt",
                        "AMZDCN19F0EE08AA"
                    ]
                }
            ],
            "requestId": "9def97a4-ed83-4ef4-b163-b63281c0f44f",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.tags [{value:\"APLU-APLUAJD0578895-TGHU6345060\",key:\"tag:manifestMatchId\"},{value:\"27626613822\",key:\"tag:asnId\"},{value:\"30160613882\",key:\"tag:asnId\"},{value:\"29345046372\",key:\"tag:asnId\"},{value:\"28572697482\",key:\"tag:asnId\"},{value:\"28572697442\",key:\"tag:asnId\"},{value:\"28572697522\",key:\"tag:asnId\"},{value:\"27626613652\",key:\"tag:asnId\"},{value:\"29360618732\",key:\"tag:asnId\"},{value:\"28895577682\",key:\"tag:asnId\"},{value:\"28895577642\",key:\"tag:asnId\"},{value:\"28572697472\",key:\"tag:asnId\"},{value:\"27614334182\",key:\"tag:asnId\"},{value:\"28584126262\",key:\"tag:asnId\"},{value:\"29345046362\",key:\"tag:asnId\"},{value:\"28584125972\",key:\"tag:asnId\"},{value:\"28572697432\",key:\"tag:asnId\"},{value:\"28572697552\",key:\"tag:asnId\"},{value:\"28584125932\",key:\"tag:asnId\"},{value:\"28572697512\",key:\"tag:asnId\"},{value:\"30160613892\",key:\"tag:asnId\"},{value:\"27626613662\",key:\"tag:asnId\"},{value:\"28895577692\",key:\"tag:asnId\"},{value:\"29360618782\",key:\"tag:asnId\"},{value:\"28895577652\",key:\"tag:asnId\"},{value:\"27614334222\",key:\"tag:asnId\"},{value:\"28572697582\",key:\"tag:asnId\"},{value:\"29360618822\",key:\"tag:asnId\"},{value:\"29345046352\",key:\"tag:asnId\"},{value:\"28572697462\",key:\"tag:asnId\"},{value:\"28572697542\",key:\"tag:asnId\"},{value:\"30160521322\",key:\"tag:asnId\"},{value:\"28572697502\",key:\"tag:asnId\"},{value:\"27615254342\",key:\"tag:asnId\"},{value:\"28584125802\",key:\"tag:asnId\"},{value:\"28584125922\",key:\"tag:asnId\"},{value:\"27626613672\",key:\"tag:asnId\"},{value:\"30160613902\",key:\"tag:asnId\"},{value:\"27614334162\",key:\"tag:asnId\"},{value:\"28572697492\",key:\"tag:asnId\"},{value:\"28584126362\",key:\"tag:asnId\"},{value:\"28572697452\",key:\"tag:asnId\"},{value:\"28572697572\",key:\"tag:asnId\"},{value:\"27626613602\",key:\"tag:asnId\"},{value:\"28572697532\",key:\"tag:asnId\"},{value:\"27615254332\",key:\"tag:asnId\"},{value:\"27626613522\",key:\"tag:asnId\"},{value:\"29360618762\",key:\"tag:asnId\"},{value:\"28895577672\",key:\"tag:asnId\"},{value:\"27614334202\",key:\"tag:asnId\"},{value:\"28584126092\",key:\"tag:asnId\"}] com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.tags/max_length 50 51] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.update(IonPaymentRequest.java:326) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.update(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.UpdatePaymentRequestHandler.handleRequest(UpdatePaymentRequestHandler.java:67) at sun.reflect.GeneratedMethodAccessor115.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119) ",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "SEGU5102555"
                        ],
                        "containerId": "box-WA4TMXYEE5UXX",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "SEGU5412252"
                        ],
                        "containerId": "box-TPUAM7SBGQXEK",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-hbag-dt7q-aiqt",
            "timestamp": "2020-03-17T05: 00: 06.787Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "6211-hbit-9qzm-0d9z_60821aec-b8a3-4af6-b952-c4a3fae0ede9",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 5,
            "creationTime": "2020-03-19T04: 21: 21.083Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 5,
            "tags": [
                {
                    "value": "100t-4flo-i59r-9df0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100r-kzm5-7q4a-bsp0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-k200-fn4o-q1x2",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100q-xtua-xx8r-m8y0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "603G00873NB0",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "603G00873NB0"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "CEXQ"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "ECMU8144640"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "621t-ocub-hqbz-4mq0"
                    ],
                    "service": {
                        "id": "6cf7e72c-1eee-48ff-97ed-61a355aeba29",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": null,
                        "destinationPort": null,
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00873NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_PORT_BROKERING_FCL_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-03T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621t-ocub-hqbz-4mq0"
                    ],
                    "service": {
                        "id": "877a7186-abf3-4b2d-af66-8cdcb196af34",
                        "transportationMode": null,
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "USLAX",
                        "destinationPort": "LGB8",
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00873NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_DELIVERY_UNLOC_USLAX_AGL_CODE_LGB8",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-03T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621t-ocub-hqbz-4mq0"
                    ],
                    "service": {
                        "id": "c88370c4-f54c-4ff2-82d5-de54b402ea75",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-03-03T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00873NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_UNLOC_CNNGB_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-03T00: 00: 00Z"
                }
            ],
            "requestId": "60821aec-b8a3-4af6-b952-c4a3fae0ede9",
            "stackTrace": """com.amazon.xbt.logisticsservice.costing.exception.CostingInstructionEvaluationException: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 135)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.getCharge(IonLogisticsService.java: 143)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.estimateCharges(IonLogisticsService.java: 120)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 34)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 17)atjava.util.stream.Collectors.lambda$toMap$58(Collectors.java: 1321)atjava.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java: 169)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java: 175)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Iterator.forEachRemaining(Iterator.java: 116)atjava.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java: 1801)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 92)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 31)atcom.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java: 58)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java: 62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java: 354)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)Causedby: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.accessor.XionDataAccessorUtil.getAllValuesFromSexpPath(XionDataAccessorUtil.java: 159)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.getMeasurementUnitToValuePathMap(NumericMeasurementEvalConfigFn.java: 105)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 48)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 32)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction$1.getVar(AsiSupplyCostEvaluationInstruction.java: 92)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.instructions.AbstractInstruction.calculateArgument(AbstractInstruction.java: 57)atcom.amazon.agl.supply.evaluation.instructions.MultiplyInstruction.calculate(MultiplyInstruction.java: 27)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 40)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 115)...30more""",
            "id": "6211-hbit-9qzm-0d9z",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-VYPFBED5WMVSA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-VEHMS5PC3ASMU",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-RPUQBYGJ3QZWQ",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-RW6AYVXF7CETM",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "ECMU8144640"
                        ],
                        "containerId": "94d87e10-4f25-4b7a-a829-3cc614172d83",
                        "containerType": "VIRTUAL",
                        "childContainerIds": [
                            "LCL-RW6AYVXF7CETM",
                            "LCL-VYPFBED5WMVSA",
                            "LCL-RPUQBYGJ3QZWQ",
                            "LCL-VEHMS5PC3ASMU"
                        ]
                    }
                ]
            },
            "entityReferenceId": "6211-hbit-9qzm-0d9z",
            "timestamp": "2020-03-19T04: 21: 22.332Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "621s-l3wp-ipms-b520_8ad5d44f-9fdb-48d5-b814-d96a56127f20",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 6,
            "creationTime": "2020-03-19T04: 21: 27.841Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 6,
            "tags": [
                {
                    "value": "100v-f9pj-ko1o-f1x0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100r-hdbk-st9r-0a90",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100t-rz5o-36fn-iap0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-hrdp-z8f8-obxf",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "603G00879NB0",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "603G00879NB0"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "CEXQ"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "APHU4663224"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "621q-xtc2-0ymb-mt50"
                    ],
                    "service": {
                        "id": "eff19f5b-ff73-418d-8ce1-f7bb14a8890b",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-03-11T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00879NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_EXPORT_CLEARANCE_FCL_UNLOC_CNNGB",
                    "invoiceContractId": "0aa60f94-ffb1-11e9-8c82-38f9d3645b3f",
                    "liabilityDate": "2020-03-11T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621q-xtc2-0ymb-mt50"
                    ],
                    "service": {
                        "id": "7ed68730-08b8-44ba-8a47-0e209cd264b4",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-02-28T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00879NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_UNLOC_CNNGB_UNLOC_USLAX",
                    "invoiceContractId": "0aa60f94-ffb1-11e9-8c82-38f9d3645b3f",
                    "liabilityDate": "2020-02-28T00: 00: 00Z"
                }
            ],
            "requestId": "8ad5d44f-9fdb-48d5-b814-d96a56127f20",
            "stackTrace": """com.amazon.xbt.logisticsservice.costing.exception.CostingInstructionEvaluationException: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 135)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.getCharge(IonLogisticsService.java: 143)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.estimateCharges(IonLogisticsService.java: 120)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 34)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 17)atjava.util.stream.Collectors.lambda$toMap$58(Collectors.java: 1321)atjava.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java: 169)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java: 175)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Iterator.forEachRemaining(Iterator.java: 116)atjava.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java: 1801)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 92)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 31)atcom.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java: 58)atsun.reflect.GeneratedMethodAccessor26.invoke(UnknownSource)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java: 354)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)Causedby: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.accessor.XionDataAccessorUtil.getAllValuesFromSexpPath(XionDataAccessorUtil.java: 159)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.getMeasurementUnitToValuePathMap(NumericMeasurementEvalConfigFn.java: 105)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 48)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 32)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction$1.getVar(AsiSupplyCostEvaluationInstruction.java: 92)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.instructions.AbstractInstruction.calculateArgument(AbstractInstruction.java: 57)atcom.amazon.agl.supply.evaluation.instructions.MultiplyInstruction.calculate(MultiplyInstruction.java: 27)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 40)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 115)...29more""",
            "id": "621s-l3wp-ipms-b520",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "APHU4663224"
                        ],
                        "containerId": "393f0af6-00a5-450f-8d6b-42d1f8d171ee",
                        "containerType": "VIRTUAL",
                        "childContainerIds": [
                            "LCL-X4JGXBGN3MY7U",
                            "LCL-QWS7M4GT7J5JU",
                            "LCL-QRFG3EXBDKFEE",
                            "LCL-VEGANA3FBYENQ"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-VEGANA3FBYENQ",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-X4JGXBGN3MY7U",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-QWS7M4GT7J5JU",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-QRFG3EXBDKFEE",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "621s-l3wp-ipms-b520",
            "timestamp": "2020-03-19T04: 21: 29.106Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "100s-0v16-9jno-l7o0_eb83f214-ce81-4b08-9731-4ef1f4b1aabb",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": null,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100s-0v16-9jno-l7o0",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "YMLU",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": "2020-03-19T04: 00: 00.000Z",
                    "lsTrackingIds": [
                        "100s-0v16-9jno-l7o0",
                        "YMLUW232377387"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": null,
                    "lsTrackingIds": [
                        "100s-0v16-9jno-l7o0",
                        "AMZDCN20E2DFA09D"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": null,
                    "lsTrackingIds": [
                        "100s-0v16-9jno-l7o0",
                        "AMZDCN20E2DFA09D"
                    ]
                }
            ],
            "requestId": "eb83f214-ce81-4b08-9731-4ef1f4b1aabb",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.cargo.containers.0.containerType \"40GP\" com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.cargo/fields.containers/element/fields.containerType/values [\"GAYLORD\", \"CARTON\", \"PALLET\", \"22G1\", \"42G1\", \"45G1\", \"L5G1\", \"42HR\", \"45R1\", \"42R1\", \"22R1\", \"VIRTUAL\", \"BAG\", \"WOODEN_CASE\", \"ROLL\", \"BALE\", \"DRUM\", \"BOX\", \"SET\", \"BUNDLE\", \"PC\", \"UNIT\", \"STEEL_DRUM\", \"REEL\", \"RACK\", \"PAIL\", \"COIL\", \"DUNDLE\", \"IBC_DRUM\", \"PACKAGE\", \"TRAILER\", \"N/A\", \"ANYA\"] null,<this>.cargo.containers.0 {containerType:\"40GP\",containerId:\"LCL-QRSF6RHHGYCMQ\",visibleContainerIdAndTypes:[{id:\"CLHU4564377\",type:\"OCEAN_CONTAINER_NUMBER\"}],tags:[{value:\"100s-4m9g-ucke-5gw0\",key:\"tag:shippingRequestId\"}],weight:{value:1004.0,unit:KG},volume:{value:8.92,unit:CU_METER}} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.cargo/fields.containers/open_elements false null] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:275) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "FFAU1501057"
                        ],
                        "containerId": "box-Q5A2PYRTC7ZDE",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "CAIU7984007"
                        ],
                        "containerId": "box-SBKZ3ZYA3SAYW",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "100s-0v16-9jno-l7o0",
            "timestamp": "2020-03-19T04: 41: 59.629Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "6211-hbit-9qzm-0d9z_59d957b9-b65f-4314-a571-f0263ae27179",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 8,
            "creationTime": "2020-03-19T04: 21: 32.613Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 8,
            "tags": [
                {
                    "value": "100t-4flo-i59r-9df0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100r-kzm5-7q4a-bsp0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-k200-fn4o-q1x2",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100q-xtua-xx8r-m8y0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-ji9z-20yu-y1bs",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-jym3-zm62-8ep2",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "603G00873NB0",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "603G00873NB0"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "CEXQ"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "ECMU8144640"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "621t-ocub-hqbz-4mq0"
                    ],
                    "service": {
                        "id": "6cf7e72c-1eee-48ff-97ed-61a355aeba29",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": null,
                        "destinationPort": null,
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00873NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_PORT_BROKERING_FCL_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-02T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621t-ocub-hqbz-4mq0"
                    ],
                    "service": {
                        "id": "877a7186-abf3-4b2d-af66-8cdcb196af34",
                        "transportationMode": null,
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "USLAX",
                        "destinationPort": "LGB8",
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00873NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_DELIVERY_UNLOC_USLAX_AGL_CODE_LGB8",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-02T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621t-ocub-hqbz-4mq0"
                    ],
                    "service": {
                        "id": "c88370c4-f54c-4ff2-82d5-de54b402ea75",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-03-02T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00873NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_UNLOC_CNNGB_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-02T00: 00: 00Z"
                }
            ],
            "requestId": "59d957b9-b65f-4314-a571-f0263ae27179",
            "stackTrace": """com.amazon.xbt.logisticsservice.costing.exception.CostingInstructionEvaluationException: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 135)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.getCharge(IonLogisticsService.java: 143)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.estimateCharges(IonLogisticsService.java: 120)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 34)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 17)atjava.util.stream.Collectors.lambda$toMap$58(Collectors.java: 1321)atjava.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java: 169)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java: 175)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Iterator.forEachRemaining(Iterator.java: 116)atjava.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java: 1801)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 92)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 31)atcom.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java: 58)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java: 62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java: 354)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)Causedby: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.accessor.XionDataAccessorUtil.getAllValuesFromSexpPath(XionDataAccessorUtil.java: 159)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.getMeasurementUnitToValuePathMap(NumericMeasurementEvalConfigFn.java: 105)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 48)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 32)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction$1.getVar(AsiSupplyCostEvaluationInstruction.java: 92)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.instructions.AbstractInstruction.calculateArgument(AbstractInstruction.java: 57)atcom.amazon.agl.supply.evaluation.instructions.MultiplyInstruction.calculate(MultiplyInstruction.java: 27)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 40)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 115)...30more""",
            "id": "6211-hbit-9qzm-0d9z",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-UQTQXRT3GKUEM",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-VYPFBED5WMVSA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-VEHMS5PC3ASMU",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-RPUQBYGJ3QZWQ",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-RW6AYVXF7CETM",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "ECMU8144640"
                        ],
                        "containerId": "94d87e10-4f25-4b7a-a829-3cc614172d83",
                        "containerType": "VIRTUAL",
                        "childContainerIds": [
                            "LCL-RW6AYVXF7CETM",
                            "LCL-VYPFBED5WMVSA",
                            "LCL-RPUQBYGJ3QZWQ",
                            "LCL-VEHMS5PC3ASMU",
                            "LCL-RXYYBZ2644UKX",
                            "LCL-UQTQXRT3GKUEM"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-RXYYBZ2644UKX",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "6211-hbit-9qzm-0d9z",
            "timestamp": "2020-03-19T04: 21: 33.859Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "6211-jetb-54sg-i3xe_4e2830d6-6276-43cb-a38c-771e8e06ddc4",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 9,
            "creationTime": "2020-03-19T04: 21: 32.413Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 9,
            "tags": [
                {
                    "value": "100s-kjzk-urz1-p2x0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100t-s4o1-l79q-0c60",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100q-dw13-a4qk-y0g0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-iyq1-hu4v-4850",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "603G00856NB0",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "603G00856NB0"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "CEXQ"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "APHU4627401"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "621r-kwst-bdpc-yn90"
                    ],
                    "service": {
                        "id": "d26ef3cf-5e63-4a75-b78c-f8029db0b5f2",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": null,
                        "destinationPort": null,
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00856NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_PORT_BROKERING_FCL_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-02-28T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621r-kwst-bdpc-yn90"
                    ],
                    "service": {
                        "id": "15f07feb-9343-4cd4-8c32-b8fb1dda8516",
                        "transportationMode": null,
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "USLAX",
                        "destinationPort": "LAX9",
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00856NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_DELIVERY_UNLOC_USLAX_AGL_CODE_LAX9",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-02-28T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621r-kwst-bdpc-yn90"
                    ],
                    "service": {
                        "id": "2524ceda-4b14-4780-aa60-5a1ade6709b7",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-02-28T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00856NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_UNLOC_CNNGB_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-02-28T00: 00: 00Z"
                }
            ],
            "requestId": "4e2830d6-6276-43cb-a38c-771e8e06ddc4",
            "stackTrace": """com.amazon.xbt.logisticsservice.costing.exception.CostingInstructionEvaluationException: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 135)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.getCharge(IonLogisticsService.java: 143)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.estimateCharges(IonLogisticsService.java: 120)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 34)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 17)atjava.util.stream.Collectors.lambda$toMap$58(Collectors.java: 1321)atjava.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java: 169)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java: 175)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Iterator.forEachRemaining(Iterator.java: 116)atjava.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java: 1801)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 92)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 31)atcom.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java: 58)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java: 62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java: 354)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)Causedby: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.accessor.XionDataAccessorUtil.getAllValuesFromSexpPath(XionDataAccessorUtil.java: 159)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.getMeasurementUnitToValuePathMap(NumericMeasurementEvalConfigFn.java: 105)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 48)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 32)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction$1.getVar(AsiSupplyCostEvaluationInstruction.java: 92)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.instructions.AbstractInstruction.calculateArgument(AbstractInstruction.java: 57)atcom.amazon.agl.supply.evaluation.instructions.MultiplyInstruction.calculate(MultiplyInstruction.java: 27)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 40)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 115)...30more""",
            "id": "6211-jetb-54sg-i3xe",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-WJS6DHVEXMMWC",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-SANDXTMFYPY3G",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "APHU4627401"
                        ],
                        "containerId": "6d17e39f-979d-4f0e-a76e-11f7fea9eb5d",
                        "containerType": "VIRTUAL",
                        "childContainerIds": [
                            "LCL-WXFD6M3HZDWXS",
                            "LCL-WJS6DHVEXMMWC",
                            "LCL-SANDXTMFYPY3G",
                            "LCL-XW2MTZA6TXP7Q"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-XW2MTZA6TXP7Q",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-WXFD6M3HZDWXS",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "6211-jetb-54sg-i3xe",
            "timestamp": "2020-03-19T04: 21: 34.038Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "100q-e6n1-0hlu-q0k0_1c31db46-9b0d-4cbc-b760-3c8e20cbcbe0",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": null,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100q-e6n1-0hlu-q0k0",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "APLU",
                    "originPort": "CNNGB",
                    "destinationPort": "USHOU",
                    "startTime": "2020-03-04T08: 41: 00.000Z",
                    "lsTrackingIds": [
                        "100q-e6n1-0hlu-q0k0",
                        "APLUNPWY056757"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USHOU",
                    "startTime": "2020-03-18T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "100q-e6n1-0hlu-q0k0",
                        "AMZDCN203A7339E3"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-03-11T00: 32: 00.000Z",
                    "lsTrackingIds": [
                        "100q-e6n1-0hlu-q0k0",
                        "AMZDCN203A7339E3"
                    ]
                }
            ],
            "requestId": "1c31db46-9b0d-4cbc-b760-3c8e20cbcbe0",
            "stackTrace": "java.lang.IllegalArgumentException: Client side exception occurred while updating payment manifest with id [8211-jym2-tksg-xjky] and version [2] at com.amazon.xbt.paymentrequest.workflow.sao.PaymentManifestAuthoritySaoImpl.updatePaymentManifest(PaymentManifestAuthoritySaoImpl.java:89) at com.amazon.xbt.paymentrequest.workflow.lambda.function.GeneratePaymentManifestFn.apply(GeneratePaymentManifestFn.java:137) at com.amazon.xbt.paymentrequest.workflow.lambda.function.GeneratePaymentManifestFn.apply(GeneratePaymentManifestFn.java:40) at com.amazon.xbt.paymentrequest.workflow.lambda.handler.GeneratePaymentManifestHandler.handleRequest(GeneratePaymentManifestHandler.java:75) at sun.reflect.GeneratedMethodAccessor24.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java:354) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119) Caused by: com.amazon.xbt.exception.InvalidResourceException: Error calling Payment Manifest Authority. HTTP status: 400 Invalid request sent by the client. PaymentManifest Optional[8211-jym2-tksg-xjky] update failed due to validation errors: Invalid draft payment manifest with charges in service: $sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0. at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestStatusExceptionFactory.generateStatusException(PaymentManifestStatusExceptionFactory.java:64) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.processResponse(PaymentManifestAuthorityServiceRestClient.java:266) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.updatePaymentManifestWithNoRetry(PaymentManifestAuthorityServiceRestClient.java:139) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.lambda$updatePaymentManifest$3(PaymentManifestAuthorityServiceRestClient.java:152) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceCallHandler.retry(PaymentManifestAuthorityServiceCallHandler.java:69) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceCallHandler.handleServiceCall(PaymentManifestAuthorityServiceCallHandler.java:34) at com.amazon.xbt.paymentmanifest.authority.client.PaymentManifestAuthorityServiceRestClient.updatePaymentManifest(PaymentManifestAuthorityServiceRestClient.java:151) at com.amazon.xbt.paymentrequest.workflow.sao.PaymentManifestAuthoritySaoImpl.updatePaymentManifest(PaymentManifestAuthoritySaoImpl.java:79) ... 13 more ",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "TGHU9741779"
                        ],
                        "containerId": "box-UVCKSXT75EJ7S",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "100q-e6n1-0hlu-q0k0",
            "timestamp": "2020-03-19T07: 00: 21.708Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "CNSZX0000329086_b65e0965-6927-4d9a-b810-cf64d4c5826a",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100r-l7v4-ut92-wyq0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "CNSZX0000329086",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "CNSZX",
                    "destinationPort": "GBFXT",
                    "startTime": "2020-03-09T14: 00: 00.000Z",
                    "lsTrackingIds": [
                        "CNSZX0000329086"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "GBFXT",
                    "destinationPort": "BHX4",
                    "startTime": null,
                    "lsTrackingIds": [
                        "CNSZX0000329086"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "CNSZX",
                    "destinationPort": "GBFXT",
                    "startTime": null,
                    "lsTrackingIds": [
                        "CNSZX0000329086"
                    ]
                }
            ],
            "requestId": "b65e0965-6927-4d9a-b810-cf64d4c5826a",
            "stackTrace": "java.lang.IllegalArgumentException: Either NodeCode or DestCode or PortCode must be present for Node Based Services at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$0(NodeBasedCompositeIdTransformFn.java:34) at java.util.Optional.orElseThrow(Optional.java:290) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$null$1(NodeBasedCompositeIdTransformFn.java:34) at java.util.Optional.orElseGet(Optional.java:267) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.lambda$getOriginId$2(NodeBasedCompositeIdTransformFn.java:33) at java.util.Optional.orElseGet(Optional.java:267) at com.amazon.xbt.finance.supply.transformer.NodeBasedCompositeIdTransformFn.getOriginId(NodeBasedCompositeIdTransformFn.java:32) at com.amazon.xbt.finance.supply.transformer.LogisticsServiceCompositeIdTransformFn.apply(LogisticsServiceCompositeIdTransformFn.java:49) at com.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java:99) at com.amazon.xbt.finance.supply.sao.AsiSupplyLogisticsServiceIonBasedSaoImpl.getLogisticsServiceByProps(AsiSupplyLogisticsServiceIonBasedSaoImpl.java:68) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:92) at com.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java:38) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java:81) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1556) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:83) at com.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java:42) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java:600) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java:299) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java:632) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:313) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.GeneratedMethodAccessor115.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "ECMU4434804"
                        ],
                        "containerId": "71942a28-9cce-4b63-b2a9-243ded1139cd",
                        "containerType": "40GP",
                        "childContainerIds": [
                            "LCL-RXQJ7DVJM33B4"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-RXQJ7DVJM33B4",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "CNSZX0000329086",
            "timestamp": "2020-03-17T18: 36: 10.232Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-ib98-mymj-owfs_0bff9a5f-4b19-45f5-879d-15dadc437e3e",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-ib98-mymj-owfs",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "MAEU",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-02-21T22: 52: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": "2020-03-09T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "USCHI",
                    "destinationPort": "IND5",
                    "startTime": "2020-03-14T11: 58: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": "2020-03-14T11: 58: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-02-26T18: 20: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                }
            ],
            "requestId": "0bff9a5f-4b19-45f5-879d-15dadc437e3e",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.cargo.containers.0.containerType \"40GP\" com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.cargo/fields.containers/element/fields.containerType/values [\"GAYLORD\", \"CARTON\", \"PALLET\", \"22G1\", \"42G1\", \"45G1\", \"L5G1\", \"42HR\", \"45R1\", \"42R1\", \"22R1\", \"VIRTUAL\", \"BAG\", \"WOODEN_CASE\", \"ROLL\", \"BALE\", \"DRUM\", \"BOX\", \"SET\", \"BUNDLE\", \"PC\", \"UNIT\", \"STEEL_DRUM\", \"REEL\", \"RACK\", \"PAIL\", \"COIL\", \"DUNDLE\", \"IBC_DRUM\", \"PACKAGE\", \"TRAILER\", \"N/A\", \"ANYA\"] null,<this>.cargo.containers.0 {containerType:\"40GP\",containerId:\"LCL-QRSF6RHHGYCMQ\",visibleContainerIdAndTypes:[{id:\"CLHU4564377\",type:\"OCEAN_CONTAINER_NUMBER\"}],tags:[{value:\"100s-4m9g-ucke-5gw0\",key:\"tag:shippingRequestId\"}],weight:{value:1004.0,unit:KG},volume:{value:8.92,unit:CU_METER}} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.cargo/fields.containers/open_elements false null] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:275) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "MSKU9654590"
                        ],
                        "containerId": "box-SB6ZP7XGNKG2C",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "MSKU0639091"
                        ],
                        "containerId": "box-XEPYNC4TUSXWU",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-ib98-mymj-owfs",
            "timestamp": "2020-03-17T21: 37: 13.288Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "1001-ib98-mymj-owfs_c7927820-2252-4070-9d53-66599c4fad40",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 1,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "1001-ib98-mymj-owfs",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "MAEU",
                    "originPort": "CNNGB",
                    "destinationPort": "USCHI",
                    "startTime": "2020-02-21T22: 52: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": "USLAX",
                    "startTime": "2020-03-09T00: 00: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "USCHI",
                    "destinationPort": "IND5",
                    "startTime": "2020-03-14T11: 58: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": "2020-03-14T11: 58: 00.000Z",
                    "lsTrackingIds": [
                        "1001-ib98-mymj-owfs",
                        "MAEU591166041"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SINO",
                    "originPort": "CNNGB",
                    "destinationPort": null,
                    "startTime": "2020-02-26T18: 20: 00.000Z",
                    "lsTrackingIds": [
                        "AMZDCN202ED1345F",
                        "1001-ib98-mymj-owfs"
                    ]
                }
            ],
            "requestId": "c7927820-2252-4070-9d53-66599c4fad40",
            "stackTrace": "java.lang.IllegalArgumentException: Document with id [] at failed with following errors : [<this>.logisticsServices.1.destination '$sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0'::{loadType:FCL,actualTimeWindow:{startTime:2020-04-27T00:00:00.000Z},origin:{location:{addressIdentifier:{addressId:\"CNNGB\",marketplaceId:\"1\"},code:\"CNNGB\",codeType:UNLOC,address:{countryCode:\"CN\",name:\"CNNGB\"},locationType:PORT_OF_LADING}},serviceProvider:{idAndType:{id:\"SINO\",type:SCAC}},transportationMode:OCEAN,customsClearanceType:IMPORT,termsOfService:{shipping:CY_DOOR,incoterm:DDP},logisticsServiceTrackingIdAndTypes:[{source:\"LSP\",id:\"AMZDCN20C65BC21F\",type:\"AMAZON_HOUSE_BILL_OF_LADING_NUMBER\"},{source:\"CLIENT\",id:\"100s-0uzl-tlzj-hgw0\",type:\"SHIPMENT_ID\"}],tags:[{value:\"4f2638c3-436a-4222-801f-6016dd534c7d\",key:\"shipmentLogisticsServiceId\"}]} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.logisticsServices/element/fields.destination/min_occurs 1 0,<this>.logisticsServices.1 '$sdl_type:com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0'::{loadType:FCL,actualTimeWindow:{startTime:2020-04-27T00:00:00.000Z},origin:{location:{addressIdentifier:{addressId:\"CNNGB\",marketplaceId:\"1\"},code:\"CNNGB\",codeType:UNLOC,address:{countryCode:\"CN\",name:\"CNNGB\"},locationType:PORT_OF_LADING}},serviceProvider:{idAndType:{id:\"SINO\",type:SCAC}},transportationMode:OCEAN,customsClearanceType:IMPORT,termsOfService:{shipping:CY_DOOR,incoterm:DDP},logisticsServiceTrackingIdAndTypes:[{source:\"LSP\",id:\"AMZDCN20C65BC21F\",type:\"AMAZON_HOUSE_BILL_OF_LADING_NUMBER\"},{source:\"CLIENT\",id:\"100s-0uzl-tlzj-hgw0\",type:\"SHIPMENT_ID\"}],tags:[{value:\"4f2638c3-436a-4222-801f-6016dd534c7d\",key:\"shipmentLogisticsServiceId\"}]} com.amazon.xbt.schema.paymentrequest.external.PaymentRequest@1.0/fields.logisticsServices/open_elements false null] at com.amazon.xbt.sdl.validate.aspect.BasicIonValidator.invoke(BasicIonValidator.java:97) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:275) at com.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java:105) at com.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java:261) at lambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java:178) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119)",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "MSKU9654590"
                        ],
                        "containerId": "box-SB6ZP7XGNKG2C",
                        "containerType": "45G1",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "MSKU0639091"
                        ],
                        "containerId": "box-XEPYNC4TUSXWU",
                        "containerType": "45G1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "1001-ib98-mymj-owfs",
            "timestamp": "2020-03-17T23: 00: 04.706Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "100s-4rvq-ps19-ht20_e636069e-dbb5-44fa-83b7-efa844a6b0ab",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": null,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100s-4rvq-ps19-ht20",
                    "key": "tag: ShipmentId"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "LCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "DMCQ",
                    "originPort": "CNTSN",
                    "destinationPort": "USLAX",
                    "startTime": "2020-03-18T06: 34: 00.000Z",
                    "lsTrackingIds": [
                        "100s-4rvq-ps19-ht20"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "LCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "DMCQ",
                    "originPort": "CNTSN",
                    "destinationPort": "USLAX",
                    "startTime": null,
                    "lsTrackingIds": [
                        "100s-4rvq-ps19-ht20",
                        "AMZDCN2078FDF010"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "LCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "DMCQ",
                    "originPort": "USLAX",
                    "destinationPort": "ONT8",
                    "startTime": null,
                    "lsTrackingIds": [
                        "100s-4rvq-ps19-ht20"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "LCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                    "serviceProviderId": "DMCQ",
                    "originPort": null,
                    "destinationPort": null,
                    "startTime": null,
                    "lsTrackingIds": [
                        "100s-4rvq-ps19-ht20"
                    ]
                }
            ],
            "requestId": "e636069e-dbb5-44fa-83b7-efa844a6b0ab",
            "stackTrace": """com.amazon.xbt.paymentrequest.authority.exception.NoSuchValueException: Novaluefoundforkey: TRACKING_IDatcom.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.lambda$getAttributeValue$1(LogisticsServiceUnitEvalConfigImpl.java: 80)atjava.util.Optional.orElseThrow(Optional.java: 290)atcom.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.getAttributeValue(LogisticsServiceUnitEvalConfigImpl.java: 80)atcom.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.getStringValue(LogisticsServiceUnitEvalConfigImpl.java: 56)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.instruction.AsiSupplyInvoiceIdInstructionImpl$1.getVar(AsiSupplyInvoiceIdInstructionImpl.java: 67)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 45)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.instruction.AsiSupplyInvoiceIdInstructionImpl.evaluate(AsiSupplyInvoiceIdInstructionImpl.java: 84)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.constructMappedLsUnit(WorkIdBasedMapper.java: 113)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.lambda$apply$0(WorkIdBasedMapper.java: 96)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Collections$2.tryAdvance(Collections.java: 4717)atjava.util.Collections$2.forEachRemaining(Collections.java: 4725)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java: 97)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java: 38)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java: 79)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java: 1556)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java: 81)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java: 42)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java: 600)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java: 299)atjava.util.concurrent.Executors$RunnableAdapter.call(Executors.java: 511)atcom.amazon.retry.RetryingCallable.call(RetryingCallable.java: 95)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java: 632)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java: 313)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java: 105)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>)atcom.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java: 70)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java: 62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java: 261)atlambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java: 178)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)""",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "CXRU1156781"
                        ],
                        "containerId": "LCL-W6B3GDHAEDRRM",
                        "containerType": "45R1",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "100s-4rvq-ps19-ht20",
            "timestamp": "2020-03-18T07: 25: 38.012Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "CNNGB0000436109_61bd9d6c-cc03-4a5c-8588-1c49b2938846",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": null,
            "creationTime": null,
            "partitionId": null,
            "entityType": "EXTERNAL_PAYMENT_REQUEST",
            "source": "XbtPaymentRequestAuthority",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 0,
            "tags": [
                {
                    "value": "100v-f0yb-4j8s-4dz0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "CNNGB0000436109",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "logisticsServices": [
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "CNNGB",
                    "destinationPort": "GBFXT",
                    "startTime": "2020-03-13T10: 00: 00.000Z",
                    "lsTrackingIds": [
                        "CNNGB0000436109"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": null,
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "GBFXT",
                    "destinationPort": "BHX4",
                    "startTime": null,
                    "lsTrackingIds": [
                        "CNNGB0000436109"
                    ]
                },
                {
                    "id": null,
                    "transportationMode": "OCEAN",
                    "loadType": "FCL",
                    "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                    "serviceProviderId": "SHKK",
                    "originPort": "CNNGB",
                    "destinationPort": "GBFXT",
                    "startTime": null,
                    "lsTrackingIds": [
                        "CNNGB0000436109"
                    ]
                }
            ],
            "requestId": "61bd9d6c-cc03-4a5c-8588-1c49b2938846",
            "stackTrace": """com.amazon.xbt.paymentrequest.authority.exception.NoSuchValueException: Novaluefoundforkey: INTERNAL_TRACKING_IDatcom.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.lambda$getAttributeValue$1(LogisticsServiceUnitEvalConfigImpl.java: 80)atjava.util.Optional.orElseThrow(Optional.java: 290)atcom.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.getAttributeValue(LogisticsServiceUnitEvalConfigImpl.java: 80)atcom.amazon.xbt.paymentrequest.authority.config.LogisticsServiceUnitEvalConfigImpl.getStringValue(LogisticsServiceUnitEvalConfigImpl.java: 56)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.instruction.AsiSupplyInvoiceIdInstructionImpl$1.getVar(AsiSupplyInvoiceIdInstructionImpl.java: 67)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 45)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.instruction.AsiSupplyInvoiceIdInstructionImpl.evaluate(AsiSupplyInvoiceIdInstructionImpl.java: 84)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.constructMappedLsUnit(WorkIdBasedMapper.java: 113)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.lambda$apply$0(WorkIdBasedMapper.java: 96)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java: 948)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java: 97)atcom.amazon.xbt.paymentrequest.authority.mapreduce.logisticsservice.map.WorkIdBasedMapper.apply(WorkIdBasedMapper.java: 38)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.lambda$eval$0(ManifestablePrEvaluator.java: 79)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java: 1556)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java: 81)atcom.amazon.xbt.paymentrequest.authority.mapreduce.ManifestablePrEvaluator.eval(ManifestablePrEvaluator.java: 42)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.evaluateChangeRecordsForPr(IonPaymentRequest.java: 600)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.lambda$create$0(IonPaymentRequest.java: 299)atjava.util.concurrent.Executors$RunnableAdapter.call(Executors.java: 511)atcom.amazon.retry.RetryingCallable.call(RetryingCallable.java: 95)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.executeTransaction(IonPaymentRequest.java: 632)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java: 313)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest.create(IonPaymentRequest.java: 105)atcom.amazon.xbt.paymentrequest.authority.business.ion.IonPaymentRequest$$EnhancerByGuice$$67a27295.create(<generated>)atcom.amazon.xbt.paymentrequest.authority.lambda.CreatePaymentRequestHandler.handleRequest(CreatePaymentRequestHandler.java: 70)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java: 62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$PojoMethodRequestHandler.handleRequest(EventHandlerLoader.java: 261)atlambdainternal.EventHandlerLoader$PojoHandlerAsStreamHandler.handleRequest(EventHandlerLoader.java: 178)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)""",
            "id": null,
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "CMAU5983935"
                        ],
                        "containerId": "2c8831e6-27e1-4904-b834-75c7dfc6bd3f",
                        "containerType": "45G1",
                        "childContainerIds": [
                            "LCL-UH5N2Q2DRUUGA"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-UH5N2Q2DRUUGA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "CNNGB0000436109",
            "timestamp": "2020-03-19T03: 44: 27.092Z",
            "status": null
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "6211-jxzg-n18s-rvj7_8c529245-72a9-493d-83e0-7ded654a1957",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 9,
            "creationTime": "2020-03-19T05: 18: 31.125Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 9,
            "tags": [
                {
                    "value": "100q-e4c0-gp3p-opx0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-h7gd-l93v-z29f",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-jig3-c03c-t4c7",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100v-bhxr-7bgx-ld10",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "603G00891NB0",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "603G00891NB0"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "CEXQ"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "ECMU4708850"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "621q-hndq-n7lk-gmx0"
                    ],
                    "service": {
                        "id": "f9ec14b7-c77c-45e4-83ae-3a1491638681",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": null,
                        "destinationPort": null,
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00891NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_PORT_BROKERING_FCL_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-02-26T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621q-hndq-n7lk-gmx0"
                    ],
                    "service": {
                        "id": "c371f4c4-0c3e-4cb7-a83d-d8cb517ac578",
                        "transportationMode": null,
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "USLAX",
                        "destinationPort": "XIX6",
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00891NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_DELIVERY_UNLOC_USLAX_AGL_CODE_XIX6",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-02-26T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621q-hndq-n7lk-gmx0"
                    ],
                    "service": {
                        "id": "5d323d74-3ab9-488b-b458-c4d47779a75b",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-02-26T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00891NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_UNLOC_CNNGB_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-02-26T00: 00: 00Z"
                }
            ],
            "requestId": "8c529245-72a9-493d-83e0-7ded654a1957",
            "stackTrace": """com.amazon.xbt.logisticsservice.costing.exception.CostingInstructionEvaluationException: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 135)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.getCharge(IonLogisticsService.java: 143)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.estimateCharges(IonLogisticsService.java: 120)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 34)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 17)atjava.util.stream.Collectors.lambda$toMap$58(Collectors.java: 1321)atjava.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java: 169)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java: 175)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Iterator.forEachRemaining(Iterator.java: 116)atjava.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java: 1801)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 92)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 31)atcom.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java: 58)atsun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethod)atsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java: 62)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java: 354)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)Causedby: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.accessor.XionDataAccessorUtil.getAllValuesFromSexpPath(XionDataAccessorUtil.java: 159)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.getMeasurementUnitToValuePathMap(NumericMeasurementEvalConfigFn.java: 105)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 48)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 32)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction$1.getVar(AsiSupplyCostEvaluationInstruction.java: 92)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.instructions.AbstractInstruction.calculateArgument(AbstractInstruction.java: 57)atcom.amazon.agl.supply.evaluation.instructions.MultiplyInstruction.calculate(MultiplyInstruction.java: 27)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 40)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 115)...30more""",
            "id": "6211-jxzg-n18s-rvj7",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "ECMU4708850"
                        ],
                        "containerId": "d01033a4-7ea5-44f8-b40a-9305e5f8aa6a",
                        "containerType": "VIRTUAL",
                        "childContainerIds": [
                            "LCL-QHYWQT4BZWVKA",
                            "LCL-T6VKZ43KYKASX",
                            "LCL-XWAJMBFPHY2BW",
                            "LCL-TM62RMXTBWEZA"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-T6VKZ43KYKASX",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-XWAJMBFPHY2BW",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-QHYWQT4BZWVKA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-TM62RMXTBWEZA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "6211-jxzg-n18s-rvj7",
            "timestamp": "2020-03-19T05: 18: 32.675Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "621t-o7cb-omim-3hv0_49515edc-a930-4802-810d-485416215e3e",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 9,
            "creationTime": "2020-03-19T05: 18: 36.438Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 9,
            "tags": [
                {
                    "value": "1001-h84v-6umb-gktd",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-hbax-upwe-jotg",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100u-rrvl-mx7s-eas0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-jyg0-62ys-8xtl",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "603G00890NB0",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "603G00890NB0"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "CEXQ"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "ECMU8152645"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "6211-jeff-hvcq-w9pu"
                    ],
                    "service": {
                        "id": "f963cd1b-764b-4e39-869b-3962834338f6",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.PortBrokering@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": null,
                        "destinationPort": null,
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00890NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_PORT_BROKERING_FCL_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-03T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "6211-jeff-hvcq-w9pu"
                    ],
                    "service": {
                        "id": "3af5fb3d-a241-4d14-bef3-2dc9aa841592",
                        "transportationMode": null,
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "USLAX",
                        "destinationPort": "SMF3",
                        "startTime": null,
                        "lsTrackingIds": [
                            "603G00890NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_DELIVERY_UNLOC_USLAX_AGL_CODE_SMF3",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-03T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "6211-jeff-hvcq-w9pu"
                    ],
                    "service": {
                        "id": "63093473-db44-4add-a5c0-43b7132e9372",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-03-03T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00890NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_UNLOC_CNNGB_UNLOC_USLAX",
                    "invoiceContractId": "A7B7F06E-3875-497A-BAD3-A4C35DABFCB6",
                    "liabilityDate": "2020-03-03T00: 00: 00Z"
                }
            ],
            "requestId": "49515edc-a930-4802-810d-485416215e3e",
            "stackTrace": "java.lang.IllegalArgumentException: Client side exception occurred for payment request with ID [6g56-l52k-u79p-rda8] and version [5] at com.amazon.xbt.paymentrequest.workflow.sao.PaymentRequestAuthoritySaoImpl.getPaymentRequest(PaymentRequestAuthoritySaoImpl.java:38) at com.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java:62) at com.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java:30) at com.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java:58) at sun.reflect.GeneratedMethodAccessor23.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at lambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java:354) at lambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java:906) at lambdainternal.AWSLambda.startRuntime(AWSLambda.java:341) at lambdainternal.AWSLambda.<clinit>(AWSLambda.java:63) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at lambdainternal.LambdaRTEntry.main(LambdaRTEntry.java:119) Caused by: com.amazon.xbt.exception.ClientException: Error calling Payment Request Authority. HTTP status: 403 Invalid request sent by the client. {\"message\":\"The security token included in the request is expired\"} at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestStatusExceptionFactory.generateStatusException(PaymentRequestStatusExceptionFactory.java:65) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceRestClient.processResponse(PaymentRequestAuthorityServiceRestClient.java:183) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceRestClient.getPaymentRequestWithNoRetry(PaymentRequestAuthorityServiceRestClient.java:78) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceRestClient.lambda$getPaymentRequest$1(PaymentRequestAuthorityServiceRestClient.java:98) at com.amazon.retry.RetryingCallable.call(RetryingCallable.java:95) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceCallHandler.retry(PaymentRequestAuthorityServiceCallHandler.java:70) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceCallHandler.handleServiceCall(PaymentRequestAuthorityServiceCallHandler.java:34) at com.amazon.xbt.paymentrequest.authority.client.PaymentRequestAuthorityServiceRestClient.getPaymentRequest(PaymentRequestAuthorityServiceRestClient.java:98) at com.amazon.xbt.paymentrequest.workflow.sao.PaymentRequestAuthoritySaoImpl.getPaymentRequest(PaymentRequestAuthoritySaoImpl.java:32) ... 13 more ",
            "id": "621t-o7cb-omim-3hv0",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-RWYXPU2UYMNF2",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": [
                            "ECMU8152645"
                        ],
                        "containerId": "25753878-3380-48c5-8851-b6a5117e476b",
                        "containerType": "VIRTUAL",
                        "childContainerIds": [
                            "LCL-WR4F7R56TYQ34",
                            "LCL-RTR2NMYJRXHWG",
                            "LCL-T4NSJ2RSYBFWK",
                            "LCL-RWYXPU2UYMNF2"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-RTR2NMYJRXHWG",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-T4NSJ2RSYBFWK",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-WR4F7R56TYQ34",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "621t-o7cb-omim-3hv0",
            "timestamp": "2020-03-19T05: 18: 37.605Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "621s-okmm-tcoz-acy0_a7e53840-d519-4595-9c17-8f3d14d702e8",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 11,
            "creationTime": "2020-03-19T05: 19: 12.610Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 11,
            "tags": [
                {
                    "value": "100q-e4c0-gp3p-opx0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-h7gd-l93v-z29f",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-jig3-c03c-t4c7",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100v-bhxr-7bgx-ld10",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "603G00891NB0",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "603G00891NB0"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "CEXQ"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "ECMU4708850"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "621q-hndq-n7lk-gmx0"
                    ],
                    "service": {
                        "id": "c952c96a-c135-4f31-b571-c058a52932d8",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-03-11T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00891NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_EXPORT_CLEARANCE_FCL_UNLOC_CNNGB",
                    "invoiceContractId": "0aa60f94-ffb1-11e9-8c82-38f9d3645b3f",
                    "liabilityDate": "2020-03-11T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621q-hndq-n7lk-gmx0"
                    ],
                    "service": {
                        "id": "5d323d74-3ab9-488b-b458-c4d47779a75b",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-02-28T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00891NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_UNLOC_CNNGB_UNLOC_USLAX",
                    "invoiceContractId": "0aa60f94-ffb1-11e9-8c82-38f9d3645b3f",
                    "liabilityDate": "2020-02-28T00: 00: 00Z"
                }
            ],
            "requestId": "a7e53840-d519-4595-9c17-8f3d14d702e8",
            "stackTrace": """com.amazon.xbt.logisticsservice.costing.exception.CostingInstructionEvaluationException: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 135)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.getCharge(IonLogisticsService.java: 143)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.estimateCharges(IonLogisticsService.java: 120)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 34)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 17)atjava.util.stream.Collectors.lambda$toMap$58(Collectors.java: 1321)atjava.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java: 169)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java: 175)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Iterator.forEachRemaining(Iterator.java: 116)atjava.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java: 1801)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 92)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 31)atcom.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java: 58)atsun.reflect.GeneratedMethodAccessor26.invoke(UnknownSource)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java: 354)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)Causedby: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.accessor.XionDataAccessorUtil.getAllValuesFromSexpPath(XionDataAccessorUtil.java: 159)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.getMeasurementUnitToValuePathMap(NumericMeasurementEvalConfigFn.java: 105)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 48)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 32)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction$1.getVar(AsiSupplyCostEvaluationInstruction.java: 92)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.instructions.AbstractInstruction.calculateArgument(AbstractInstruction.java: 57)atcom.amazon.agl.supply.evaluation.instructions.MultiplyInstruction.calculate(MultiplyInstruction.java: 27)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 40)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 115)...29more""",
            "id": "621s-okmm-tcoz-acy0",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "ECMU4708850"
                        ],
                        "containerId": "d01033a4-7ea5-44f8-b40a-9305e5f8aa6a",
                        "containerType": "VIRTUAL",
                        "childContainerIds": [
                            "LCL-QHYWQT4BZWVKA",
                            "LCL-T6VKZ43KYKASX",
                            "LCL-XWAJMBFPHY2BW",
                            "LCL-TM62RMXTBWEZA"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-T6VKZ43KYKASX",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-XWAJMBFPHY2BW",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-QHYWQT4BZWVKA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-TM62RMXTBWEZA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "621s-okmm-tcoz-acy0",
            "timestamp": "2020-03-19T05: 19: 13.914Z",
            "status": "ACTIVE"
        }
    },
    {
        "_index": "event_details_2020_3_amazon_fba_inbound",
        "_type": "_doc",
        "_id": "621s-okmm-tcoz-acy0_a63ec23f-39ad-463a-acd1-90257ef03bfc",
        "_score": 4.2816033,
        "_source": {
            "entityReferenceVersion": 12,
            "creationTime": "2020-03-19T05: 19: 16.055Z",
            "partitionId": "AMAZON_FBA_INBOUND",
            "entityType": "PAYMENT_MANIFEST",
            "source": "XbtPaymentRequestWorkflow",
            "dataPartitionId": "AMAZON_FBA_INBOUND",
            "version": 12,
            "tags": [
                {
                    "value": "100q-e4c0-gp3p-opx0",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-h7gd-l93v-z29f",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "1001-jig3-c03c-t4c7",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "100v-bhxr-7bgx-ld10",
                    "key": "tag: ShipmentId"
                },
                {
                    "value": "603G00891NB0",
                    "key": "tag: BillOfLadingNumber"
                }
            ],
            "eventCode": "ERR_ILLEGAL_ARG",
            "billMatchKey": [
                {
                    "key": "TRACKING_ID",
                    "value": "603G00891NB0"
                },
                {
                    "key": "SERVICE_PROVIDER_ID",
                    "value": "CEXQ"
                },
                {
                    "key": "OCEAN_CONTAINER_NUMBER",
                    "value": "ECMU4708850"
                }
            ],
            "logisticsServices": [
                {
                    "eprReferenceIds": [
                        "621q-hndq-n7lk-gmx0"
                    ],
                    "service": {
                        "id": "c952c96a-c135-4f31-b571-c058a52932d8",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.CustomsClearance@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-03-11T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00891NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_EXPORT_CLEARANCE_FCL_UNLOC_CNNGB",
                    "invoiceContractId": "0aa60f94-ffb1-11e9-8c82-38f9d3645b3f",
                    "liabilityDate": "2020-03-11T00: 00: 00Z"
                },
                {
                    "eprReferenceIds": [
                        "621q-hndq-n7lk-gmx0"
                    ],
                    "service": {
                        "id": "5d323d74-3ab9-488b-b458-c4d47779a75b",
                        "transportationMode": "OCEAN",
                        "loadType": "FCL",
                        "serviceType": "$sdl_type: com.amazon.xbt.finance.schema.shared.logisticsservice.Transportation@1.0",
                        "serviceProviderId": "CEXQ",
                        "originPort": "CNNGB",
                        "destinationPort": "USLAX",
                        "startTime": "2020-02-28T00: 00: 00.000Z",
                        "lsTrackingIds": [
                            "603G00891NB0"
                        ]
                    },
                    "logisticsServiceContractId": "CEXQ_TRANSPORTATION_FCL_UNLOC_CNNGB_UNLOC_USLAX",
                    "invoiceContractId": "0aa60f94-ffb1-11e9-8c82-38f9d3645b3f",
                    "liabilityDate": "2020-02-28T00: 00: 00Z"
                }
            ],
            "requestId": "a63ec23f-39ad-463a-acd1-90257ef03bfc",
            "stackTrace": """com.amazon.xbt.logisticsservice.costing.exception.CostingInstructionEvaluationException: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 135)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.getCharge(IonLogisticsService.java: 143)atcom.amazon.xbt.logisticsservice.costing.business.IonLogisticsService.estimateCharges(IonLogisticsService.java: 120)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 34)atcom.amazon.xbt.logisticsservice.costing.LogisticsServiceCostEvaluatorImpl.evaluate(LogisticsServiceCostEvaluatorImpl.java: 17)atjava.util.stream.Collectors.lambda$toMap$58(Collectors.java: 1321)atjava.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java: 169)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java: 175)atjava.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java: 193)atjava.util.Iterator.forEachRemaining(Iterator.java: 116)atjava.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java: 1801)atjava.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java: 481)atjava.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java: 471)atjava.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java: 708)atjava.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java: 234)atjava.util.stream.ReferencePipeline.collect(ReferencePipeline.java: 499)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 92)atcom.amazon.xbt.paymentrequest.workflow.lambda.function.CalculateChargeEstimatesFn.apply(CalculateChargeEstimatesFn.java: 31)atcom.amazon.xbt.paymentrequest.workflow.lambda.handler.ChargeEstimatesHandlerBase.handleRequest(ChargeEstimatesHandlerBase.java: 58)atsun.reflect.GeneratedMethodAccessor26.invoke(UnknownSource)atsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java: 43)atjava.lang.reflect.Method.invoke(Method.java: 498)atlambdainternal.EventHandlerLoader$StreamMethodRequestHandler.handleRequest(EventHandlerLoader.java: 354)atlambdainternal.EventHandlerLoader$2.call(EventHandlerLoader.java: 906)atlambdainternal.AWSLambda.startRuntime(AWSLambda.java: 341)atlambdainternal.AWSLambda.<clinit>(AWSLambda.java: 63)atjava.lang.Class.forName0(NativeMethod)atjava.lang.Class.forName(Class.java: 348)atlambdainternal.LambdaRTEntry.main(LambdaRTEntry.java: 119)Causedby: java.lang.IllegalArgumentException: Noionvaluesfoundatthepath: (.cargoSummary(.containerTypeToCountMappings(*(.containerType))))atcom.amazon.xbt.logisticsservice.costing.accessor.XionDataAccessorUtil.getAllValuesFromSexpPath(XionDataAccessorUtil.java: 159)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.getMeasurementUnitToValuePathMap(NumericMeasurementEvalConfigFn.java: 105)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 48)atcom.amazon.xbt.logisticsservice.costing.config.NumericMeasurementEvalConfigFn.apply(NumericMeasurementEvalConfigFn.java: 32)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction$1.getVar(AsiSupplyCostEvaluationInstruction.java: 92)atcom.amazon.agl.supply.evaluation.instructions.VarInstruction.calculate(VarInstruction.java: 35)atcom.amazon.agl.supply.evaluation.instructions.AbstractInstruction.calculateArgument(AbstractInstruction.java: 57)atcom.amazon.agl.supply.evaluation.instructions.MultiplyInstruction.calculate(MultiplyInstruction.java: 27)atcom.amazon.agl.supply.evaluation.EvaluationHelper.internalEvaluate(EvaluationHelper.java: 57)atcom.amazon.agl.supply.evaluation.EvaluationHelper.evaluate(EvaluationHelper.java: 40)atcom.amazon.xbt.logisticsservice.costing.business.AsiSupplyCostEvaluationInstruction.evaluate(AsiSupplyCostEvaluationInstruction.java: 115)...29more""",
            "id": "621s-okmm-tcoz-acy0",
            "cargo": {
                "containers": [
                    {
                        "visibleContainerIds": [
                            "ECMU4708850"
                        ],
                        "containerId": "d01033a4-7ea5-44f8-b40a-9305e5f8aa6a",
                        "containerType": "VIRTUAL",
                        "childContainerIds": [
                            "LCL-QHYWQT4BZWVKA",
                            "LCL-T6VKZ43KYKASX",
                            "LCL-XWAJMBFPHY2BW",
                            "LCL-TM62RMXTBWEZA"
                        ]
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-T6VKZ43KYKASX",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-XWAJMBFPHY2BW",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-QHYWQT4BZWVKA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    },
                    {
                        "visibleContainerIds": null,
                        "containerId": "LCL-TM62RMXTBWEZA",
                        "containerType": "VIRTUAL",
                        "childContainerIds": null
                    }
                ]
            },
            "entityReferenceId": "621s-okmm-tcoz-acy0",
            "timestamp": "2020-03-19T05: 19: 17.255Z",
            "status": "ACTIVE"
        }
    }
]